[tool.poetry]
name = "fastapi-planner-application"
version = "0.1.0"
description = "fastapi planner application demo"
authors = ["safecorners <safeconers.mobile@gmail.com>"]
readme = "README.md"
packages = [
  {include = "planner", from="src"}
]

[tool.poetry.dependencies]
python = "^3.11"
fastapi = "^0.109.2"
uvicorn = {extras = ["standard"], version = "^0.21.1"}
pydantic = {extras = ["email"], version = "^2.6.1"}
pydantic-settings = "^2.2.1"
sqlalchemy = "^2.0.27"
asyncpg = "^0.29.0"
dependency-injector = "^4.41.0"
psycopg2-binary = "^2.9.9"
passlib = "^1.7.4"
types-passlib = "^1.7.7.20240106"
python-jose = "^3.3.0"
python-multipart = "^0.0.9"
bcrypt = "^4.1.2"
types-python-jose = "^3.3.4.20240106"


[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"
pytest-asyncio = "^0.23.5"
pytest-mock = "^3.12.0"
pytest-xdist = "^3.5.0"
pytest-cov = "^4.0.0"
coverage = "^7.4.3"
httpx = "^0.23.3"
asgi-lifespan = "^2.1.0"


[tool.poetry.group.dev.dependencies]
ruff = "^0.2.2"
mypy = "^1.8.0"
pre-commit = "^3.6.2"

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-vv"
]
pythonpath = ["src"]
asyncio_mode = "strict"
log_cli = true
log_cli_level = "debug"

[tool.mypy]
plugins = [
  "pydantic.mypy"
]
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_reexport = true
no_implicit_optional = true
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
# init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.11
target-version = "py311"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
